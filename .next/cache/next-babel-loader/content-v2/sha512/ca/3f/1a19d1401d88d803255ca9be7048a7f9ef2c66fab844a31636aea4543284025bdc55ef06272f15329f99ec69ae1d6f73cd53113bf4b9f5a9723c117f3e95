{"ast":null,"code":"import { getSession } from \"next-auth/react\";\nimport { hashPassword, verifyPassword } from \"../../../lib/auth\";\nimport { connectToDatabase } from \"../../../lib/db\";\n\nasync function handler(req, res) {\n  if (req.method !== \"PATCH\") {\n    return;\n  }\n\n  const session = await getSession({\n    req: req\n  });\n\n  if (!session) {\n    res.status(401).json({\n      message: \"Not authenticated\"\n    });\n    return;\n  }\n\n  const userEmail = session.user.email;\n  const oldPassword = req.body.oldPassword;\n  const newPassword = req.body.newPassword;\n  const client = await connectToDatabase();\n  const usersCollection = client.db().collection(\"user\");\n  const user = await usersCollection.findOne({\n    email: userEmail\n  });\n\n  if (!user) {\n    res.status(404).json({\n      message: \"User not found!\"\n    });\n    client.close();\n    return;\n  }\n\n  const currentPassword = user.password;\n  const passwordsAreEqual = await verifyPassword(oldPassword, currentPassword);\n\n  if (!passwordsAreEqual) {\n    res.status(401).json({\n      message: \"Invalid password\"\n    });\n    client.close();\n    return;\n  }\n\n  const hashedPassword = await hashPassword(newPassword);\n  const result = await usersCollection.updateOne({\n    email: userEmail\n  }, {\n    $set: {\n      password: hashedPassword\n    }\n  });\n  client.close();\n  res.status(200).json({\n    message: \"Password updated!\"\n  });\n}\n\nexport default handler;","map":{"version":3,"sources":["/home/siaw-dev/Documents/next/learning-projects/next-auth/pages/api/user/change-password.js"],"names":["getSession","hashPassword","verifyPassword","connectToDatabase","handler","req","res","method","session","status","json","message","userEmail","user","email","oldPassword","body","newPassword","client","usersCollection","db","collection","findOne","close","currentPassword","password","passwordsAreEqual","hashedPassword","result","updateOne","$set"],"mappings":"AAAA,SAASA,UAAT,QAA2B,iBAA3B;AACA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,mBAA7C;AACA,SAASC,iBAAT,QAAkC,iBAAlC;;AAEA,eAAeC,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAC/B,MAAID,GAAG,CAACE,MAAJ,KAAe,OAAnB,EAA4B;AAC1B;AACD;;AAED,QAAMC,OAAO,GAAG,MAAMR,UAAU,CAAC;AAAEK,IAAAA,GAAG,EAAEA;AAAP,GAAD,CAAhC;;AAEA,MAAI,CAACG,OAAL,EAAc;AACZF,IAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAArB;AACA;AACD;;AAED,QAAMC,SAAS,GAAGJ,OAAO,CAACK,IAAR,CAAaC,KAA/B;AACA,QAAMC,WAAW,GAAGV,GAAG,CAACW,IAAJ,CAASD,WAA7B;AACA,QAAME,WAAW,GAAGZ,GAAG,CAACW,IAAJ,CAASC,WAA7B;AAEA,QAAMC,MAAM,GAAG,MAAMf,iBAAiB,EAAtC;AACA,QAAMgB,eAAe,GAAGD,MAAM,CAACE,EAAP,GAAYC,UAAZ,CAAuB,MAAvB,CAAxB;AACA,QAAMR,IAAI,GAAG,MAAMM,eAAe,CAACG,OAAhB,CAAwB;AAAER,IAAAA,KAAK,EAAEF;AAAT,GAAxB,CAAnB;;AAEA,MAAI,CAACC,IAAL,EAAW;AACTP,IAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAArB;AACAO,IAAAA,MAAM,CAACK,KAAP;AACA;AACD;;AAED,QAAMC,eAAe,GAAGX,IAAI,CAACY,QAA7B;AACA,QAAMC,iBAAiB,GAAG,MAAMxB,cAAc,CAACa,WAAD,EAAcS,eAAd,CAA9C;;AAEA,MAAI,CAACE,iBAAL,EAAwB;AACtBpB,IAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAArB;AACAO,IAAAA,MAAM,CAACK,KAAP;AACA;AACD;;AAED,QAAMI,cAAc,GAAG,MAAM1B,YAAY,CAACgB,WAAD,CAAzC;AAEA,QAAMW,MAAM,GAAG,MAAMT,eAAe,CAACU,SAAhB,CACnB;AAAEf,IAAAA,KAAK,EAAEF;AAAT,GADmB,EAEnB;AAAEkB,IAAAA,IAAI,EAAE;AAAEL,MAAAA,QAAQ,EAAEE;AAAZ;AAAR,GAFmB,CAArB;AAKAT,EAAAA,MAAM,CAACK,KAAP;AACAjB,EAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAArB;AACD;;AAED,eAAeP,OAAf","sourcesContent":["import { getSession } from \"next-auth/react\";\nimport { hashPassword, verifyPassword } from \"../../../lib/auth\";\nimport { connectToDatabase } from \"../../../lib/db\";\n\nasync function handler(req, res) {\n  if (req.method !== \"PATCH\") {\n    return;\n  }\n\n  const session = await getSession({ req: req });\n\n  if (!session) {\n    res.status(401).json({ message: \"Not authenticated\" });\n    return;\n  }\n\n  const userEmail = session.user.email;\n  const oldPassword = req.body.oldPassword;\n  const newPassword = req.body.newPassword;\n\n  const client = await connectToDatabase();\n  const usersCollection = client.db().collection(\"user\");\n  const user = await usersCollection.findOne({ email: userEmail });\n\n  if (!user) {\n    res.status(404).json({ message: \"User not found!\" });\n    client.close();\n    return;\n  }\n\n  const currentPassword = user.password;\n  const passwordsAreEqual = await verifyPassword(oldPassword, currentPassword);\n\n  if (!passwordsAreEqual) {\n    res.status(401).json({ message: \"Invalid password\" });\n    client.close();\n    return;\n  }\n\n  const hashedPassword = await hashPassword(newPassword);\n\n  const result = await usersCollection.updateOne(\n    { email: userEmail },\n    { $set: { password: hashedPassword } }\n  );\n\n  client.close();\n  res.status(200).json({ message: \"Password updated!\" });\n}\n\nexport default handler;\n"]},"metadata":{},"sourceType":"module"}